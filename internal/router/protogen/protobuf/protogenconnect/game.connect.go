// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protobuf/game.proto

package protogenconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	protobuf "github.com/dena-autumn-2024-g/wrp-server/internal/router/protogen/protobuf"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GameServiceName is the fully-qualified name of the GameService service.
	GameServiceName = "water_ring.GameService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GameServiceStartGameStreamProcedure is the fully-qualified name of the GameService's
	// StartGameStream RPC.
	GameServiceStartGameStreamProcedure = "/water_ring.GameService/StartGameStream"
	// GameServiceMoveProcedure is the fully-qualified name of the GameService's Move RPC.
	GameServiceMoveProcedure = "/water_ring.GameService/Move"
	// GameServicePushButtonProcedure is the fully-qualified name of the GameService's PushButton RPC.
	GameServicePushButtonProcedure = "/water_ring.GameService/PushButton"
	// GameServiceReleaseButtonProcedure is the fully-qualified name of the GameService's ReleaseButton
	// RPC.
	GameServiceReleaseButtonProcedure = "/water_ring.GameService/ReleaseButton"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gameServiceServiceDescriptor               = protobuf.File_protobuf_game_proto.Services().ByName("GameService")
	gameServiceStartGameStreamMethodDescriptor = gameServiceServiceDescriptor.Methods().ByName("StartGameStream")
	gameServiceMoveMethodDescriptor            = gameServiceServiceDescriptor.Methods().ByName("Move")
	gameServicePushButtonMethodDescriptor      = gameServiceServiceDescriptor.Methods().ByName("PushButton")
	gameServiceReleaseButtonMethodDescriptor   = gameServiceServiceDescriptor.Methods().ByName("ReleaseButton")
)

// GameServiceClient is a client for the water_ring.GameService service.
type GameServiceClient interface {
	// ゲームを開始するボタンが押された
	StartGameStream(context.Context, *connect.Request[protobuf.StartGameStreamRequest]) (*connect.ServerStreamForClient[protobuf.StartGameStreamResponse], error)
	Move(context.Context, *connect.Request[protobuf.MoveRequest]) (*connect.Response[protobuf.MoveResponse], error)
	PushButton(context.Context, *connect.Request[protobuf.PushButtonRequest]) (*connect.Response[protobuf.PushButtonResponse], error)
	ReleaseButton(context.Context, *connect.Request[protobuf.ReleaseButtonRequest]) (*connect.Response[protobuf.ReleaseButtonResponse], error)
}

// NewGameServiceClient constructs a client for the water_ring.GameService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGameServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gameServiceClient{
		startGameStream: connect.NewClient[protobuf.StartGameStreamRequest, protobuf.StartGameStreamResponse](
			httpClient,
			baseURL+GameServiceStartGameStreamProcedure,
			connect.WithSchema(gameServiceStartGameStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		move: connect.NewClient[protobuf.MoveRequest, protobuf.MoveResponse](
			httpClient,
			baseURL+GameServiceMoveProcedure,
			connect.WithSchema(gameServiceMoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pushButton: connect.NewClient[protobuf.PushButtonRequest, protobuf.PushButtonResponse](
			httpClient,
			baseURL+GameServicePushButtonProcedure,
			connect.WithSchema(gameServicePushButtonMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		releaseButton: connect.NewClient[protobuf.ReleaseButtonRequest, protobuf.ReleaseButtonResponse](
			httpClient,
			baseURL+GameServiceReleaseButtonProcedure,
			connect.WithSchema(gameServiceReleaseButtonMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gameServiceClient implements GameServiceClient.
type gameServiceClient struct {
	startGameStream *connect.Client[protobuf.StartGameStreamRequest, protobuf.StartGameStreamResponse]
	move            *connect.Client[protobuf.MoveRequest, protobuf.MoveResponse]
	pushButton      *connect.Client[protobuf.PushButtonRequest, protobuf.PushButtonResponse]
	releaseButton   *connect.Client[protobuf.ReleaseButtonRequest, protobuf.ReleaseButtonResponse]
}

// StartGameStream calls water_ring.GameService.StartGameStream.
func (c *gameServiceClient) StartGameStream(ctx context.Context, req *connect.Request[protobuf.StartGameStreamRequest]) (*connect.ServerStreamForClient[protobuf.StartGameStreamResponse], error) {
	return c.startGameStream.CallServerStream(ctx, req)
}

// Move calls water_ring.GameService.Move.
func (c *gameServiceClient) Move(ctx context.Context, req *connect.Request[protobuf.MoveRequest]) (*connect.Response[protobuf.MoveResponse], error) {
	return c.move.CallUnary(ctx, req)
}

// PushButton calls water_ring.GameService.PushButton.
func (c *gameServiceClient) PushButton(ctx context.Context, req *connect.Request[protobuf.PushButtonRequest]) (*connect.Response[protobuf.PushButtonResponse], error) {
	return c.pushButton.CallUnary(ctx, req)
}

// ReleaseButton calls water_ring.GameService.ReleaseButton.
func (c *gameServiceClient) ReleaseButton(ctx context.Context, req *connect.Request[protobuf.ReleaseButtonRequest]) (*connect.Response[protobuf.ReleaseButtonResponse], error) {
	return c.releaseButton.CallUnary(ctx, req)
}

// GameServiceHandler is an implementation of the water_ring.GameService service.
type GameServiceHandler interface {
	// ゲームを開始するボタンが押された
	StartGameStream(context.Context, *connect.Request[protobuf.StartGameStreamRequest], *connect.ServerStream[protobuf.StartGameStreamResponse]) error
	Move(context.Context, *connect.Request[protobuf.MoveRequest]) (*connect.Response[protobuf.MoveResponse], error)
	PushButton(context.Context, *connect.Request[protobuf.PushButtonRequest]) (*connect.Response[protobuf.PushButtonResponse], error)
	ReleaseButton(context.Context, *connect.Request[protobuf.ReleaseButtonRequest]) (*connect.Response[protobuf.ReleaseButtonResponse], error)
}

// NewGameServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGameServiceHandler(svc GameServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gameServiceStartGameStreamHandler := connect.NewServerStreamHandler(
		GameServiceStartGameStreamProcedure,
		svc.StartGameStream,
		connect.WithSchema(gameServiceStartGameStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceMoveHandler := connect.NewUnaryHandler(
		GameServiceMoveProcedure,
		svc.Move,
		connect.WithSchema(gameServiceMoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServicePushButtonHandler := connect.NewUnaryHandler(
		GameServicePushButtonProcedure,
		svc.PushButton,
		connect.WithSchema(gameServicePushButtonMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gameServiceReleaseButtonHandler := connect.NewUnaryHandler(
		GameServiceReleaseButtonProcedure,
		svc.ReleaseButton,
		connect.WithSchema(gameServiceReleaseButtonMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/water_ring.GameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GameServiceStartGameStreamProcedure:
			gameServiceStartGameStreamHandler.ServeHTTP(w, r)
		case GameServiceMoveProcedure:
			gameServiceMoveHandler.ServeHTTP(w, r)
		case GameServicePushButtonProcedure:
			gameServicePushButtonHandler.ServeHTTP(w, r)
		case GameServiceReleaseButtonProcedure:
			gameServiceReleaseButtonHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGameServiceHandler struct{}

func (UnimplementedGameServiceHandler) StartGameStream(context.Context, *connect.Request[protobuf.StartGameStreamRequest], *connect.ServerStream[protobuf.StartGameStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("water_ring.GameService.StartGameStream is not implemented"))
}

func (UnimplementedGameServiceHandler) Move(context.Context, *connect.Request[protobuf.MoveRequest]) (*connect.Response[protobuf.MoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("water_ring.GameService.Move is not implemented"))
}

func (UnimplementedGameServiceHandler) PushButton(context.Context, *connect.Request[protobuf.PushButtonRequest]) (*connect.Response[protobuf.PushButtonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("water_ring.GameService.PushButton is not implemented"))
}

func (UnimplementedGameServiceHandler) ReleaseButton(context.Context, *connect.Request[protobuf.ReleaseButtonRequest]) (*connect.Response[protobuf.ReleaseButtonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("water_ring.GameService.ReleaseButton is not implemented"))
}
