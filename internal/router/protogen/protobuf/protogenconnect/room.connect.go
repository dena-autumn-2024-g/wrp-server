// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protobuf/room.proto

package protogenconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	protobuf "github.com/dena-autumn-2024-g/wrp-server/internal/router/protogen/protobuf"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoomServiceName is the fully-qualified name of the RoomService service.
	RoomServiceName = "water_ring.RoomService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoomServiceCreateRoomProcedure is the fully-qualified name of the RoomService's CreateRoom RPC.
	RoomServiceCreateRoomProcedure = "/water_ring.RoomService/CreateRoom"
	// RoomServiceWaitForUserJoinProcedure is the fully-qualified name of the RoomService's
	// WaitForUserJoin RPC.
	RoomServiceWaitForUserJoinProcedure = "/water_ring.RoomService/WaitForUserJoin"
	// RoomServiceJoinRoomProcedure is the fully-qualified name of the RoomService's JoinRoom RPC.
	RoomServiceJoinRoomProcedure = "/water_ring.RoomService/JoinRoom"
	// RoomServiceCloseRoomProcedure is the fully-qualified name of the RoomService's CloseRoom RPC.
	RoomServiceCloseRoomProcedure = "/water_ring.RoomService/CloseRoom"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	roomServiceServiceDescriptor               = protobuf.File_protobuf_room_proto.Services().ByName("RoomService")
	roomServiceCreateRoomMethodDescriptor      = roomServiceServiceDescriptor.Methods().ByName("CreateRoom")
	roomServiceWaitForUserJoinMethodDescriptor = roomServiceServiceDescriptor.Methods().ByName("WaitForUserJoin")
	roomServiceJoinRoomMethodDescriptor        = roomServiceServiceDescriptor.Methods().ByName("JoinRoom")
	roomServiceCloseRoomMethodDescriptor       = roomServiceServiceDescriptor.Methods().ByName("CloseRoom")
)

// RoomServiceClient is a client for the water_ring.RoomService service.
type RoomServiceClient interface {
	// 部屋を作成
	CreateRoom(context.Context, *connect.Request[protobuf.CreateRoomRequest]) (*connect.Response[protobuf.CreateRoomResponse], error)
	// 部屋にユーザーが参加するのを待つ
	WaitForUserJoin(context.Context, *connect.Request[protobuf.WaitForUserJoinRequest]) (*connect.ServerStreamForClient[protobuf.WaitForUserJoinResponse], error)
	JoinRoom(context.Context, *connect.Request[protobuf.JoinRoomRequest]) (*connect.Response[protobuf.JoinRoomResponse], error)
	// 部屋を閉じる
	CloseRoom(context.Context, *connect.Request[protobuf.CloseRoomRequest]) (*connect.Response[protobuf.CloseRoomResponse], error)
}

// NewRoomServiceClient constructs a client for the water_ring.RoomService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoomServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoomServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &roomServiceClient{
		createRoom: connect.NewClient[protobuf.CreateRoomRequest, protobuf.CreateRoomResponse](
			httpClient,
			baseURL+RoomServiceCreateRoomProcedure,
			connect.WithSchema(roomServiceCreateRoomMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		waitForUserJoin: connect.NewClient[protobuf.WaitForUserJoinRequest, protobuf.WaitForUserJoinResponse](
			httpClient,
			baseURL+RoomServiceWaitForUserJoinProcedure,
			connect.WithSchema(roomServiceWaitForUserJoinMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		joinRoom: connect.NewClient[protobuf.JoinRoomRequest, protobuf.JoinRoomResponse](
			httpClient,
			baseURL+RoomServiceJoinRoomProcedure,
			connect.WithSchema(roomServiceJoinRoomMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		closeRoom: connect.NewClient[protobuf.CloseRoomRequest, protobuf.CloseRoomResponse](
			httpClient,
			baseURL+RoomServiceCloseRoomProcedure,
			connect.WithSchema(roomServiceCloseRoomMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// roomServiceClient implements RoomServiceClient.
type roomServiceClient struct {
	createRoom      *connect.Client[protobuf.CreateRoomRequest, protobuf.CreateRoomResponse]
	waitForUserJoin *connect.Client[protobuf.WaitForUserJoinRequest, protobuf.WaitForUserJoinResponse]
	joinRoom        *connect.Client[protobuf.JoinRoomRequest, protobuf.JoinRoomResponse]
	closeRoom       *connect.Client[protobuf.CloseRoomRequest, protobuf.CloseRoomResponse]
}

// CreateRoom calls water_ring.RoomService.CreateRoom.
func (c *roomServiceClient) CreateRoom(ctx context.Context, req *connect.Request[protobuf.CreateRoomRequest]) (*connect.Response[protobuf.CreateRoomResponse], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// WaitForUserJoin calls water_ring.RoomService.WaitForUserJoin.
func (c *roomServiceClient) WaitForUserJoin(ctx context.Context, req *connect.Request[protobuf.WaitForUserJoinRequest]) (*connect.ServerStreamForClient[protobuf.WaitForUserJoinResponse], error) {
	return c.waitForUserJoin.CallServerStream(ctx, req)
}

// JoinRoom calls water_ring.RoomService.JoinRoom.
func (c *roomServiceClient) JoinRoom(ctx context.Context, req *connect.Request[protobuf.JoinRoomRequest]) (*connect.Response[protobuf.JoinRoomResponse], error) {
	return c.joinRoom.CallUnary(ctx, req)
}

// CloseRoom calls water_ring.RoomService.CloseRoom.
func (c *roomServiceClient) CloseRoom(ctx context.Context, req *connect.Request[protobuf.CloseRoomRequest]) (*connect.Response[protobuf.CloseRoomResponse], error) {
	return c.closeRoom.CallUnary(ctx, req)
}

// RoomServiceHandler is an implementation of the water_ring.RoomService service.
type RoomServiceHandler interface {
	// 部屋を作成
	CreateRoom(context.Context, *connect.Request[protobuf.CreateRoomRequest]) (*connect.Response[protobuf.CreateRoomResponse], error)
	// 部屋にユーザーが参加するのを待つ
	WaitForUserJoin(context.Context, *connect.Request[protobuf.WaitForUserJoinRequest], *connect.ServerStream[protobuf.WaitForUserJoinResponse]) error
	JoinRoom(context.Context, *connect.Request[protobuf.JoinRoomRequest]) (*connect.Response[protobuf.JoinRoomResponse], error)
	// 部屋を閉じる
	CloseRoom(context.Context, *connect.Request[protobuf.CloseRoomRequest]) (*connect.Response[protobuf.CloseRoomResponse], error)
}

// NewRoomServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoomServiceHandler(svc RoomServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	roomServiceCreateRoomHandler := connect.NewUnaryHandler(
		RoomServiceCreateRoomProcedure,
		svc.CreateRoom,
		connect.WithSchema(roomServiceCreateRoomMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceWaitForUserJoinHandler := connect.NewServerStreamHandler(
		RoomServiceWaitForUserJoinProcedure,
		svc.WaitForUserJoin,
		connect.WithSchema(roomServiceWaitForUserJoinMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceJoinRoomHandler := connect.NewUnaryHandler(
		RoomServiceJoinRoomProcedure,
		svc.JoinRoom,
		connect.WithSchema(roomServiceJoinRoomMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roomServiceCloseRoomHandler := connect.NewUnaryHandler(
		RoomServiceCloseRoomProcedure,
		svc.CloseRoom,
		connect.WithSchema(roomServiceCloseRoomMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/water_ring.RoomService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoomServiceCreateRoomProcedure:
			roomServiceCreateRoomHandler.ServeHTTP(w, r)
		case RoomServiceWaitForUserJoinProcedure:
			roomServiceWaitForUserJoinHandler.ServeHTTP(w, r)
		case RoomServiceJoinRoomProcedure:
			roomServiceJoinRoomHandler.ServeHTTP(w, r)
		case RoomServiceCloseRoomProcedure:
			roomServiceCloseRoomHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoomServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoomServiceHandler struct{}

func (UnimplementedRoomServiceHandler) CreateRoom(context.Context, *connect.Request[protobuf.CreateRoomRequest]) (*connect.Response[protobuf.CreateRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("water_ring.RoomService.CreateRoom is not implemented"))
}

func (UnimplementedRoomServiceHandler) WaitForUserJoin(context.Context, *connect.Request[protobuf.WaitForUserJoinRequest], *connect.ServerStream[protobuf.WaitForUserJoinResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("water_ring.RoomService.WaitForUserJoin is not implemented"))
}

func (UnimplementedRoomServiceHandler) JoinRoom(context.Context, *connect.Request[protobuf.JoinRoomRequest]) (*connect.Response[protobuf.JoinRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("water_ring.RoomService.JoinRoom is not implemented"))
}

func (UnimplementedRoomServiceHandler) CloseRoom(context.Context, *connect.Request[protobuf.CloseRoomRequest]) (*connect.Response[protobuf.CloseRoomResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("water_ring.RoomService.CloseRoom is not implemented"))
}
